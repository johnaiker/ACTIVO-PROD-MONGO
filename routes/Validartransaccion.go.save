package routes

import (
	"encoding/json"
	"fmt"
	"net/http"
	"bodp2c/helpers"
	JSONSructRS "bodp2c/request"
//	"bodp2c/responses"
	"strings"
	"time"

	"github.com/labstack/echo"
	"gopkg.in/go-playground/validator.v9"
)

//Request .
type Request struct {
        Locator       string `json:"locator" validate:"required"`
        CodBanco      string `json:"CodBanco" validate:"required"`
        TelPagador    string `json:"TelPagador" validate:"required"`
        TelComercio    string `json:"TelComercio" validate:"required"`
        CedPagador    string `json:"CedPagador" validate:"required"`
        FecPago       string `json:"FecPago" validate:"required"`
        Monto         string `json:"Monto" validate:"required"`
        Ip            string `json:"ip" validate:"required"`
        Comercio      string `json:"comercio" validate:"required"`
        Cuenta      string `json:"cuenta" validate:"required"`
}

//Consulta .
func ValidarTransaccion(c echo.Context) (err error) {
//	payPM := responses.PayPM{}
	request := new(JSONSructRS.PayRP)
	if err = c.Bind(request); err != nil {
		helpers.ValidError(err)
		return c.JSON(http.StatusBadRequest, map[string]string{
			"Error": err.Error(),
		})
	}
	helpers.WriteFile([]byte(fmt.Sprintln("%s:::%s\n", "Consulta, Pagomovil: Lo que llega del frontend: ", request, time.Now().Format("2006-01-02 15:04:05"))), "proceso.txt")

	//validaciones
	if err := c.Validate(request); err != nil {
		errArrayValidation := strings.Split(err.(validator.ValidationErrors).Error(), "\n")
		helpers.ValidError(err)
		return c.JSON(http.StatusBadRequest, map[string][]string{"errors": errArrayValidation})
	}
	fmt.Println("Consulta, Pagomovil: Lo que llega del frontend: ", request)
	//tomar el timepo para la bd
        t := time.Now()
        tiempo := t.Format("03:04:05 PM")
        fmt.Println(tiempo)

        //dandole forma a la fecha del time
        formatted := fmt.Sprintf("%d%02d%02d",
                t.Year(), t.Month(), t.Day())


        //Llamado a la conexion de la BD para hacer el insert de los datos recibidos del frontend
        session := helpers.ConnectAndReturnSessionDB()

        //Tomando las variables de la request y remplazandolo para un cuerpo para enviar al banco
        Requests := new(Request)
        Requests.CodBanco = request.CodBanco
        Requests.TelPagador = request.TelPagador
        Requests.TelComercio = request.TelComercio
        Requests.CedPagador = request.CedPagador
        Requests.FecPago = request.FecPago
//      Requests.RefPago = request.RefPago
        Requests.Monto = request.Monto

	fmt.Println("Consulta , Pagomovil: Lo enviado al banco: ", Requests)
	helpers.WriteFile([]byte(fmt.Sprintln("%s:::%s\n", "Consulta, pagomovil: lo enviado al banco: ", Requests, time.Now().Format("2006-01-02 15:04:05"))), "proceso.txt")
	fechart := formatted
	Formatfecha := string(fechart[0]) + string(fechart[1]) + string(fechart[2]) + string(fechart[3]) + "-" + string(fechart[4]) + string(fechart[5]) + "-" + string(fechart[6]) + string(fechart[7])

        montoDecimal, err := helpers.ToDecimal(request.Monto)
        if err != nil {
                fmt.Println(err.Error())
                helpers.ValidError(err)
                return c.JSON(http.StatusInternalServerError, map[string]string{
                        "code":    "001",
                        "message": "Posible error al parseo a decimal del campo montoflaot",
                        "Error":   err.Error(),
                })
        }

 if err := session.Query(`INSERT INTO
                maestra.pagomovil_bod
                (comercio,
                locator,
                monto,
                banco,
                codres,
                time,
                currency,
                date,
                ip,
                telcomercio,
                telpagador,
                cedpagador,
                ref,
                proforma,
                status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                request.Comercio,
                request.Locator,
                montoDecimal,
                request.CodBanco,
                "NA",
                tiempo,
                "VES",
                Formatfecha,
                request.Ip,
                request.TelComercio,
                request.TelPagador,
                request.CedPagador,
                "NA",
                request.Cuenta,
                false).Exec(); err != nil {
                //inicio de log si hay algun error al insertar los datos en la tabla
                helpers.ValidError(err)
                fmt.Println("Pagomovil: Error al Insertar los datos a la tabla maestra.pagomovil: ", err.Error())
                fmt.Println("|=====================| Fin Pagomovil |========================|")
                helpers.WriteFile([]byte(fmt.Sprintln("|=====================| Fin Pagomovil |========================|", time.Now().Format("2006-01-02 15:04:05"))), "proceso.txt")
                //fin del log
                return c.JSON(http.StatusInternalServerError, map[string]string{
                        "code":     "001",
                        "message": "Ocurrio un error inesperado, intente mas tarde",
                })
        }
 defer session.Close()



	//parsear el json a []byte para el envio
	json, err := json.Marshal(Requests)
	if err != nil {
		helpers.ValidError(err)
		return c.JSON(http.StatusInternalServerError, map[string]string{
			"Error": err.Error(),
		})
	}
	//test
	//cabeza de lo que enviamos al banco
        header := map[string]string{
                "content-type":     "application/json",
//                "Authorization":    "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1ODQxNjYwODMxMzciLCJpYXQiOjE2MjA3NjExOTZ9.GbfHGBtxd9_xDsaTIWmdhcoMu2gQ_NZY_8GMuqkpbWuzQNznq6oVsAl90SJNJxzmG0IPXkHYaGul0z3u5S_zNQ",
                "Authorization":    "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1ODQxNjYwODMxMzciLCJpYXQiOjE2MjUxNDkyODV9.oF6rq7rU5ErcGh01mbhvDLwKip2H39ZVM_YU1ANBXmyoVmWRYMEPuzmdigLCo7VwJCFYjZhrLh39q25Kf3LU5Q",
}


	//url donde enviamos a ACTIVO
//        url := "http://192.168.232.13:7000/pagosp2c/transaccion"
      url := "http://192.168.232.14:8090/pagop2c/transaccion"
	bodyResp, _ := helpers.SendJSON(url, header, json)

	 	if err := helpers.VerificarResponse(bodyResp); err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{
			"code":    "01",
			"mensaje": "Error en la conexion con el banco, Por favor intente nuevamente",
			"Error":   err.Error(),
		})
	} 

	s := string(bodyResp)
	fmt.Println("para retornar: ", s)
	mu := helpers.VerificarResponse(bodyResp)
	fmt.Println(mu)


	return c.JSON(http.StatusOK,s) 
//map[string]string{
	//	"datos": s,
//	}) 
}
